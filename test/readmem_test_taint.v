/* Generated by Yosys 0.8+     147 (git sha1 7ce9d2c, clang 8.0.0 -fPIC -Os) */

(* top =  1  *)
(* src = "readmem_test.v:28" *)
module Test(clk, rst, or_mode, a_addr, b_addr, c_addr, c, a, b, my_count);
  (* src = "readmem_test.v:42" *)
  wire [31:0] _000_;
  (* src = "readmem_test.v:42" *)
  wire [2:0] _001_;
  (* src = "readmem_test.v:42" *)
  wire [31:0] _002_;
  (* src = "readmem_test.v:42" *)
  wire _003_;
  (* src = "readmem_test.v:42" *)
  wire [2:0] _004_;
  (* src = "readmem_test.v:42" *)
  wire [2:0] _005_;
  (* src = "readmem_test.v:42" *)
  wire [2:0] _006_;
  (* src = "readmem_test.v:44" *)
  wire _007_;
  (* src = "readmem_test.v:48" *)
  wire _008_;
  (* src = "readmem_test.v:52" *)
  wire _009_;
  wire _010_;
  wire _011_;
  wire [31:0] _012_;
  (* src = "readmem_test.v:58|readmem_test.v:23" *)
  wire [31:0] _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire [31:0] _029_;
  wire [31:0] _030_;
  wire [31:0] _031_;
  wire [31:0] _032_;
  wire [31:0] _033_;
  wire [31:0] _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire [31:0] _043_;
  wire [31:0] _044_;
  wire [31:0] _045_;
  wire [31:0] _046_;
  wire [31:0] _047_;
  wire [31:0] _048_;
  wire [31:0] _049_;
  wire [31:0] _050_;
  (* src = "readmem_test.v:66|readmem_test.v:6" *)
  wire [31:0] _051_;
  (* src = "readmem_test.v:66|readmem_test.v:7" *)
  wire [31:0] _052_;
  (* src = "readmem_test.v:66|readmem_test.v:8" *)
  wire [31:0] _053_;
  (* src = "readmem_test.v:35" *)
  output [31:0] a;
  (* src = "readmem_test.v:30" *)
  input [2:0] a_addr;
  (* src = "readmem_test.v:38" *)
  wire [2:0] addr;
  (* src = "readmem_test.v:36" *)
  output [31:0] b;
  (* src = "readmem_test.v:31" *)
  input [2:0] b_addr;
  (* src = "readmem_test.v:33" *)
  output [31:0] c;
  (* src = "readmem_test.v:32" *)
  input [2:0] c_addr;
  (* src = "readmem_test.v:39" *)
  wire [31:0] cc;
  (* src = "readmem_test.v:29" *)
  input clk;
  (* src = "readmem_test.v:54" *)
  reg in_data;
  (* src = "readmem_test.v:58|readmem_test.v:14" *)
  wire [2:0] \mem.addr ;
  (* src = "readmem_test.v:58|readmem_test.v:13" *)
  wire \mem.clk ;
  (* src = "readmem_test.v:58|readmem_test.v:15" *)
  wire [31:0] \mem.in_data ;
  (* src = "readmem_test.v:58|readmem_test.v:16" *)
  wire [31:0] \mem.out_data ;
  (* init = 32'd305419896 *)
  wire [31:0] \mem.ram[0] ;
  (* init = 32'd2882343476 *)
  wire [31:0] \mem.ram[1] ;
  (* init = 32'd588526996 *)
  wire [31:0] \mem.ram[2] ;
  (* init = 32'd2863311530 *)
  wire [31:0] \mem.ram[3] ;
  (* init = 32'd3149642683 *)
  wire [31:0] \mem.ram[4] ;
  (* init = 32'd3435973836 *)
  wire [31:0] \mem.ram[5] ;
  (* init = 32'd3722304989 *)
  wire [31:0] \mem.ram[6] ;
  wire [31:0] \mem.ram[7] ;
  (* src = "readmem_test.v:58|readmem_test.v:13" *)
  (* unused_bits = "0" *)
  wire \mem.rst ;
  (* src = "readmem_test.v:58|readmem_test.v:13" *)
  wire \mem.wmode ;
  (* src = "readmem_test.v:71" *)
  wire mode;
  (* init = 3'h0 *)
  (* src = "readmem_test.v:34" *)
  output [2:0] my_count;
  reg [2:0] my_count = 3'h0;
  (* src = "readmem_test.v:66|readmem_test.v:3" *)
  wire [31:0] \op.a ;
  (* src = "readmem_test.v:66|readmem_test.v:4" *)
  wire [31:0] \op.b ;
  (* src = "readmem_test.v:66|readmem_test.v:5" *)
  wire [31:0] \op.c ;
  (* src = "readmem_test.v:66|readmem_test.v:2" *)
  wire \op.clk ;
  (* src = "readmem_test.v:66|readmem_test.v:2" *)
  wire \op.mode ;
  (* src = "readmem_test.v:66|readmem_test.v:2" *)
  (* unused_bits = "0" *)
  wire \op.rst ;
  (* src = "readmem_test.v:29" *)
  input or_mode;
  (* src = "readmem_test.v:40" *)
  wire [31:0] out_data;
  (* src = "readmem_test.v:29" *)
  input rst;
  (* src = "readmem_test.v:63" *)
  wire wmode;
  assign _004_ = my_count + (* src = "readmem_test.v:43" *) 1'h1;
  assign _007_ = ! (* src = "readmem_test.v:44" *) my_count;
  assign _008_ = my_count == (* src = "readmem_test.v:48" *) 1'h1;
  assign _009_ = my_count > (* src = "readmem_test.v:52" *) 2'h3;
  reg [0:0] \a_reg[0] ;
  always @(posedge clk)
      \a_reg[0]  <= _000_[0];
  assign a[0] = \a_reg[0] ;
  reg [0:0] \b_reg[0] ;
  always @(posedge clk)
      \b_reg[0]  <= _002_[0];
  assign b[0] = \b_reg[0] ;
  reg [1:0] _060_;
  always @(posedge clk)
      _060_ <= _001_[2:1];
  assign addr[2:1] = _060_;
  always @(posedge clk)
      in_data <= _003_;
  always @(posedge clk)
      my_count <= _004_;
  assign _006_[2:1] = _009_ ? (* src = "readmem_test.v:52" *) c_addr[2:1] : addr[2:1];
  assign _005_[2:1] = _008_ ? (* src = "readmem_test.v:48" *) b_addr[2:1] : _006_[2:1];
  assign _001_[2:1] = _007_ ? (* src = "readmem_test.v:44" *) a_addr[2:1] : _005_[2:1];
  assign _010_ = _009_ ? (* src = "readmem_test.v:52" *) \op.c [0] : in_data;
  assign _011_ = _008_ ? (* src = "readmem_test.v:48" *) in_data : _010_;
  assign _003_ = _007_ ? (* src = "readmem_test.v:44" *) in_data : _011_;
  assign _012_[0] = _008_ ? (* src = "readmem_test.v:48" *) \mem.out_data [0] : b[0];
  assign _002_[0] = _007_ ? (* src = "readmem_test.v:44" *) b[0] : _012_[0];
  assign _000_[0] = _007_ ? (* src = "readmem_test.v:44" *) \mem.out_data [0] : a[0];
  assign _026_ = ~ addr[0];
  assign _027_ = ~ addr[1];
  assign _028_ = ~ addr[2];
  assign _014_ = _027_ & _028_;
  assign _015_ = _026_ & _014_;
  assign _016_ = addr[0] & _014_;
  assign _017_ = addr[1] & _028_;
  assign _018_ = _026_ & _017_;
  assign _019_ = addr[0] & _017_;
  assign _020_ = _027_ & addr[2];
  assign _021_ = _026_ & _020_;
  assign _022_ = addr[0] & _020_;
  assign _023_ = addr[1] & addr[2];
  assign _024_ = _026_ & _023_;
  assign _025_ = addr[0] & _023_;
  assign \mem.out_data [0] = addr[2] ? _030_[0] : _029_[0];
  assign _029_[0] = addr[1] ? _032_[0] : _031_[0];
  assign _030_[0] = addr[1] ? _034_[0] : _033_[0];
  assign _031_[0] = addr[0] ? \mem.ram[1] [0] : \mem.ram[0] [0];
  assign _032_[0] = addr[0] ? \mem.ram[3] [0] : \mem.ram[2] [0];
  assign _033_[0] = addr[0] ? \mem.ram[5] [0] : \mem.ram[4] [0];
  assign _034_[0] = addr[0] ? \mem.ram[7] [0] : \mem.ram[6] [0];
  assign _035_ = _015_ & _013_[31];
  assign _036_ = _016_ & _013_[31];
  assign _037_ = _018_ & _013_[31];
  assign _038_ = _019_ & _013_[31];
  assign _039_ = _021_ & _013_[31];
  assign _040_ = _022_ & _013_[31];
  assign _041_ = _024_ & _013_[31];
  assign _042_ = _025_ & _013_[31];
  assign _043_[0] = _035_ ? in_data : \mem.ram[0] [0];
  assign _044_[0] = _036_ ? in_data : \mem.ram[1] [0];
  assign _045_[0] = _037_ ? in_data : \mem.ram[2] [0];
  assign _046_[0] = _038_ ? in_data : \mem.ram[3] [0];
  assign _047_[0] = _039_ ? in_data : \mem.ram[4] [0];
  assign _048_[0] = _040_ ? in_data : \mem.ram[5] [0];
  assign _049_[0] = _041_ ? in_data : \mem.ram[6] [0];
  assign _050_[0] = _042_ ? in_data : \mem.ram[7] [0];
  reg [0:0] \mem.ram_reg[0][0]  = 1'h0;
  always @(posedge clk)
      \mem.ram_reg[0][0]  <= _043_[0];
  assign \mem.ram[0] [0] = \mem.ram_reg[0][0] ;
  reg [0:0] \mem.ram_reg[1][0]  = 1'h0;
  always @(posedge clk)
      \mem.ram_reg[1][0]  <= _044_[0];
  assign \mem.ram[1] [0] = \mem.ram_reg[1][0] ;
  reg [0:0] \mem.ram_reg[2][0]  = 1'h0;
  always @(posedge clk)
      \mem.ram_reg[2][0]  <= _045_[0];
  assign \mem.ram[2] [0] = \mem.ram_reg[2][0] ;
  reg [0:0] \mem.ram_reg[3][0]  = 1'h0;
  always @(posedge clk)
      \mem.ram_reg[3][0]  <= _046_[0];
  assign \mem.ram[3] [0] = \mem.ram_reg[3][0] ;
  reg [0:0] \mem.ram_reg[4][0]  = 1'h1;
  always @(posedge clk)
      \mem.ram_reg[4][0]  <= _047_[0];
  assign \mem.ram[4] [0] = \mem.ram_reg[4][0] ;
  reg [0:0] \mem.ram_reg[5][0]  = 1'h0;
  always @(posedge clk)
      \mem.ram_reg[5][0]  <= _048_[0];
  assign \mem.ram[5] [0] = \mem.ram_reg[5][0] ;
  reg [0:0] \mem.ram_reg[6][0]  = 1'h1;
  always @(posedge clk)
      \mem.ram_reg[6][0]  <= _049_[0];
  assign \mem.ram[6] [0] = \mem.ram_reg[6][0] ;
  reg [0:0] \mem.ram_reg[7][0] ;
  always @(posedge clk)
      \mem.ram_reg[7][0]  <= _050_[0];
  assign \mem.ram[7] [0] = \mem.ram_reg[7][0] ;
  assign _013_[31] = \mem.wmode  ? (* src = "readmem_test.v:58|readmem_test.v:24" *) 1'h1 : 1'h0;
  assign _052_[0] = a[0] & (* src = "readmem_test.v:66|readmem_test.v:7" *) b[0];
  assign _053_[0] = a[0] | (* src = "readmem_test.v:66|readmem_test.v:8" *) b[0];
  reg [0:0] \op.c_reg[0] ;
  always @(posedge clk)
      \op.c_reg[0]  <= _051_[0];
  assign \op.c [0] = \op.c_reg[0] ;
  assign _051_[0] = \op.mode  ? (* src = "readmem_test.v:66|readmem_test.v:7" *) _053_[0] : _052_[0];
  assign c = \op.c ;
  assign cc = \op.c ;
  assign \mem.addr  = addr;
  assign \mem.clk  = clk;
  assign \mem.in_data  = { 31'h00000000, in_data };
  assign \mem.rst  = rst;
  assign mode = \op.mode ;
  assign \op.a  = a;
  assign \op.b  = b;
  assign \op.clk  = clk;
  assign \op.rst  = rst;
  assign out_data = \mem.out_data ;
  assign wmode = \mem.wmode ;
endmodule
